ss <- sample(1:dim(ozone)[1],replace=T)
# draw sample from the dataa and reorder rows based on ozone
ozone0 <- ozone[ss,]; ozone0 <- ozone0[order(ozone0$ozone),]
# fit loess function through data (similar to spline)
loess0 <- loess(temperature ~ ozone,data=ozone0,span=0.2)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
plot(ozone$ozone,ozone$temperature,pch=19,cex=0.5)
plot(ozone$ozone,ozone$temperature,pch=19,cex=0.5)
# plot each prediction model
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=2)}
for (i in 1:10){
#create sampel from data with replacement, create index first
ss<-sample(1:dim(ozone)[1],replace=T)
ozone0<-ozone[ss,];ozone0<-ozone[order(ozone$ozone),];
#fit loess function through data (similar to spline)
loess0<-loess(temperature~ozone,data=ozone0,span=0.2)
#predict from loess curve for the same value each time
ll[i,]<-predict(loess0,newdata=data.frame(ozone=1:155))
}
plot(ozone$ozone,ozone$temperature, pch=19,cex=0.5)
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=2)}
for(i in 1:10){
# create sample from data with replacement
ss <- sample(1:dim(ozone)[1],replace=T)
# draw sample from the dataa and reorder rows based on ozone
ozone0 <- ozone[ss,]; ozone0 <- ozone0[order(ozone0$ozone),];
# fit loess function through data (similar to spline)
loess0 <- loess(temperature ~ ozone,data=ozone0,span=0.2)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
plot(ozone$ozone,ozone$temperature, pch=19,cex=0.5)
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=2)}
for (i in 1:10){
#create sampel from data with replacement, create index first
ss<-sample(1:dim(ozone)[1],replace=T)
ozone0<-ozone[ss,];ozone0<-ozone[order(ozone$ozone),];
#fit loess function through data (similar to spline)
loess0<-loess(temperature~ozone,data=ozone0,span=0.2)
#predict from loess curve for the same value each time
ll[i,]<-predict(loess0,newdata=data.frame(ozone=1:155))
}
plot(ozone$ozone,ozone$temperature, pch=19,cex=0.5)
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=2)}
for (i in 1:10){
#create sampel from data with replacement, create index first
ss<-sample(1:dim(ozone)[1],replace=T)
ozone0<-ozone[ss,];ozone0<-ozone0[order(ozone$ozone),];
#fit loess function through data (similar to spline)
loess0<-loess(temperature~ozone,data=ozone0,span=0.2)
#predict from loess curve for the same value each time
ll[i,]<-predict(loess0,newdata=data.frame(ozone=1:155))
}
for (i in 1:10){
#create sampel from data with replacement, create index first
ss<-sample(1:dim(ozone)[1],replace=T)
ozone0<-ozone[ss,];ozone0<-ozone0[order(ozone$ozone),];
#fit loess function through data (similar to spline)
loess0<-loess(temperature~ozone,data=ozone0,span=0.2)
#predict from loess curve for the same value each time
ll[i,]<-predict(loess0,newdata=data.frame(ozone=1:155))
}
for(i in 1:10){
# create sample from data with replacement
ss <- sample(1:dim(ozone)[1],replace=T)
# draw sample from the dataa and reorder rows based on ozone
ozone0 <- ozone[ss,]; ozone0 <- ozone0[order(ozone0$ozone),];
# fit loess function through data (similar to spline)
loess0 <- loess(temperature ~ ozone,data=ozone0,span=0.2)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
for(i in 1:10){
# create sample from data with replacement
ss <- sample(1:dim(ozone)[1],replace=T)
# draw sample from the dataa and reorder rows based on ozone
ozone0 <- ozone[ss,]; ozone0 <- ozone0[order(ozone0$ozone),]
# fit loess function through data (similar to spline)
loess0 <- loess(temperature ~ ozone,data=ozone0,span=0.2)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
for (i in 1:10){
#create sampel from data with replacement, create index first
ss<-sample(1:dim(ozone)[1],replace=T)
ozone0<-ozone[ss,];ozone0<-ozone0[order(ozone$ozone),]
#fit loess function through data (similar to spline)
loess0<-loess(temperature~ozone,data=ozone0,span=0.2)
#predict from loess curve for the same value each time
ll[i,]<-predict(loess0,newdata=data.frame(ozone=1:155))
}
for(i in 1:10){
#create sample index from data with replacememnt
ss<-sample(1:dim(ozone)[1],replace=T)
#draw sample from data and reorder
ozone0<-ozone[ss,];ozone0<-ozone0[order(ozone0$ozone),]
# fit loess function through data
loess0<-loess(temperature~ozone,data=ozone,span=0.2)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
plot(ozone$ozone,ozone$temperature, pch=19,cex=0.5)
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=2)}
for(i in 1:10){
# create sample from data with replacement
ss <- sample(1:dim(ozone)[1],replace=T)
# draw sample from the dataa and reorder rows based on ozone
ozone0 <- ozone[ss,]; ozone0 <- ozone0[order(ozone0$ozone),]
# fit loess function through data (similar to spline)
loess0 <- loess(temperature ~ ozone,data=ozone0,span=0.2)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
for(i in 1:10){
# create sample from data with replacement
ss <- sample(1:dim(ozone)[1],replace=T)
# draw sample from the dataa and reorder rows based on ozone
ozone0 <- ozone[ss,]; ozone0 <- ozone0[order(ozone0$ozone),]
# fit loess function through data (similar to spline)
loess0 <- loess(temperature ~ ozone,data=ozone0,span=0.2)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
head(ozone)
#reorder based on ozone variable
ozone<-ozone[order(ozone$ozone),]
#create empty matrix
ll<-matrix(NA,nrow=10,ncol=155) # why I can't use matrix here??????!!!!!
for(i in 1:10){
# create sample from data with replacement
ss <- sample(1:dim(ozone)[1],replace=T)
# draw sample from the dataa and reorder rows based on ozone
ozone0 <- ozone[ss,]; ozone0 <- ozone0[order(ozone0$ozone),]
# fit loess function through data (similar to spline)
loess0 <- loess(temperature ~ ozone,data=ozone0,span=0.2)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
for(i in 1:10){
#create sample index from data with replacememnt
ss<-sample(1:dim(ozone)[1],replace=T)
#draw sample from data and reorder
ozone0<-ozone[ss,];ozone0<-ozone0[order(ozone0$ozone),]
# fit loess function through data
loess0<-loess(temperature~ozone,data=ozone,span=0.2)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
for(i in 1:10){
# create sample from data with replacement
ss <- sample(1:dim(ozone)[1],replace=T)
# draw sample from the dataa and reorder rows based on ozone
ozone0 <- ozone[ss,]; ozone0 <- ozone0[order(ozone0$ozone),]
# fit loess function through data (similar to spline)
loess0 <- loess(temperature ~ ozone,data=ozone0,span=0.2)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
plot(ozone$ozone,ozone$temperature, pch=19,cex=0.5)
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=2)}
for(i in 1:10){
#create sample index from data with replacememnt
ss<-sample(1:dim(ozone)[1],replace=T)
#draw sample from data and reorder
ozone0<-ozone[ss,];ozone0<-ozone0[order(ozone0$ozone),]
# fit loess function through data
loess0<-loess(temperature~ozone,data=ozone,span=0.2)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
plot(ozone$ozone,ozone$temperature, pch=19,cex=0.5)
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=2)}
for(i in 1:10){
#create sample index from data with replacememnt
ss<-sample(1:dim(ozone)[1],replace=T)
#draw sample from data and reorder
ozone0<-ozone[ss,];ozone0<-ozone0[order(ozone0$ozone),]
# fit loess function through data
loess0<-loess(temperature~ozone,data=ozone0,span=0.2)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
for(i in 1:10){
#create sample index from data with replacememnt
ss<-sample(1:dim(ozone)[1],replace=T)
#draw sample from data and reorder
ozone0<-ozone[ss,];ozone0<-ozone0[order(ozone0$ozone),]
# fit loess function through data
loess0 <- loess(temperature ~ ozone,data=ozone0,span=0.2)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
head(ozone)
#reorder based on ozone variable
ozone<-ozone[order(ozone$ozone),]
#create empty matrix
ll<-matrix(NA,nrow=10,ncol=155) # why I can't use matrix here??????!!!!!
for(i in 1:10){
#create sample index from data with replacememnt
ss<-sample(1:dim(ozone)[1],replace=T)
#draw sample from data and reorder
ozone0<-ozone[ss,];ozone0<-ozone0[order(ozone0$ozone),]
# fit loess function through data
loess0 <- loess(temperature ~ ozone,data=ozone0,span=0.2)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
plot(ozone$ozone,ozone$temperature, pch=19,cex=0.5)
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=2)}
line(1:155,sapply(ll,2,mean),col="red",lwd=2)
line(1:155,apply(ll,2,mean),col="red",lwd=2)
lines(1:155,apply(ll,2,mean),col="red",lwd=2)
points(1:155,apply(ll,2,mean),col="red",lwd=2)
points(1:155,apply(ll,2,mean),col="red",lwd=1)
points(1:155,apply(ll,2,mean),col="red",lwd=1)
plot(ozone$ozone,ozone$temperature, pch=19,cex=0.5)
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=2)}
points(1:155,apply(ll,2,mean),col="red",lwd=1)
lines(1:155,apply(ll,2,mean),col="red",lwd=1)
plot(ozone$ozone,ozone$temperature, pch=19,cex=0.5)
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=2)}
lines(1:155,apply(ll,2,mean),col="red",lwd=1)
predictor<-data.frame(ozone=ozone$ozone)
temperature=ozone$temperature
predictor<-data.frame(ozone=ozone$ozone)
temperature=ozone$temperature
treebag<-bag(predictor,temperature,B=10,
bagControl=bagControl(fit=ctreebag$fit,predict=cteeBag$pred,aggregate=ctreebag&aggregate))
predictor<-data.frame(ozone=ozone$ozone)
temperature=ozone$temperature
treebag<-bag(predictor,temperature,B=10,
bagControl=bagControl(fit=ctreeBag$fit,predict=cteeBag$pred,aggregate=ctreeBag&aggregate))
predictor<-data.frame(ozone=ozone$ozone)
temperature=ozone$temperature
treebag<-bag(predictor,temperature,B=10,
bagControl=bagControl(fit=ctreeBag$fit,predict=ctreeBag$pred,aggregate=ctreeBag&aggregate))
library(party); data(ozone,package="ElemStatLearn")
install.packages"party"
install.packages("party")
library(party); data(ozone,package="ElemStatLearn")
# reorder rows based on ozone variable
ozone <- ozone[order(ozone$ozone),]
# extract predictors
predictors <- data.frame(ozone=ozone$ozone)
# extract outcome
temperature <- ozone$temperature
# run bagging algorithm
treebag <- bag(predictors, temperature, B = 10,
# custom bagging function
bagControl = bagControl(fit = ctreeBag$fit,
predict = ctreeBag$pred,
aggregate = ctreeBag$aggregate))
plot(ozone$ozone,temperature,col='lightgrey',pch=19)
# plot the first fit
points(ozone$ozone,predict(treebag$fits[[1]]$fit,predictors),pch=19,col="red")
# plot the aggregated predictions
points(ozone$ozone,predict(treebag,predictors),pch=19,col="blue")
```
colNames(iris)
colnames(iris)
head(ozone)
#reorder based on ozone variable
ozone<-ozone[order(ozone$ozone),]
#create empty matrix
ll<-matrix(NA,nrow=10,ncol=155)
for (i in 1:10){
#create sampel from data with replacement, create index first
ss<-sample(dim(ozone)[1],replace=T)
ozone0<-ozone[ss,];ozone0<-ozone[order(ozone$ozone),];
#fit loess function through data (similar to spline)
loess0<-loess(temperature~ozone,data=ozone0,span=0.2)
#predict from loess curve for the same value each time
ll[i,]<-predict(loess0,newdata=data.frame(ozone=1:155))
}
ll
head(ozone)
#reorder based on ozone variable
ozone<-ozone[order(ozone$ozone),]
#create empty matrix
ll<-data.frame(NA,nrow=10,ncol=155)
for (i in 1:10){
#create sampel from data with replacement, create index first
ss<-sample(dim(ozone)[1],replace=T)
ozone0<-ozone[ss,];ozone0<-ozone[order(ozone$ozone),];
#fit loess function through data (similar to spline)
loess0<-loess(temperature~ozone,data=ozone0,span=0.2)
#predict from loess curve for the same value each time
ll[i,]<-predict(loess0,newdata=data.frame(ozone=1:155))
}
ll
8732
2
3
library(lubridate)
library(dplyr)
library(lattice)
setwd("~/Dropbox/Coursera/5 Reproducible research/Assignment 1/AS")
DSActivity <- read.csv("activity.csv")
View(DSActivity)
DSActivity <- mutate (DSActivity, date = as.date(DSActivity$date))
DSActivity <- mutate (DSActivity, date = date(DSActivity$date))
DSActivity <- mutate (DSActivity, date = Date(DSActivity$date))
DSActivity <- mutate (DSActivity, date = date(DSActivity$date))
DSActivity <- mutate (DSActivity, date = ymd(DSActivity$date))
CompleteActivity <- DSActivity[complete.cases(DSActivity), ]
par(mfrow=c(1,1))
GDateActivity <- group_by(CompleteActivity, date)
StepsPerDate <-
summarize(GDateActivity, sum(steps), mean(steps), median(steps))
View(StepsPerDate)
names(StepsPerDate) =
c("date", "totalSteps", "meanSteps", "medianSteps")
hist(x= StepsPerDate$totalSteps, main = "Histogram of Total Steps", xlab = "Total Steps")
plot(StepsPerDate$date, StepsPerDate$meanSteps,
col = "red", type = "l", main = "Average Steps Per Day",
xlab = "Day", ylab= "Average Steps")
GIntActivity <- group_by(CompleteActivity, interval)
StepsPerInterval <-
summarize(GIntActivity, sum(steps), mean(steps), median(steps))
names(StepsPerInterval) =
c("interval", "totalSteps", "meanSteps", "medianSteps")
plot(as.integer(StepsPerInterval$interval), StepsPerInterval$meanSteps,
col = "red", type = "l", main = "Average Steps Per Interval",
xlab = "Interval", ylab= "Average Steps")
IWeekday <- weekdays(ImputeActivity$date)
for (i in 1:length(IWeekday)){
if (IWeekday[i] == "Saturday" | IWeekday[i] ==  "Sunday"){
IWeekday[i] <- "weekend"
}
else IWeekday[i] <- "weekday"
}
IWeekday <- weekdays(ImputeActivity$date)
IWeekday <- weekdays(GIntActivity$date)
for (i in 1:length(IWeekday)){
if (IWeekday[i] == "Saturday" | IWeekday[i] ==  "Sunday"){
IWeekday[i] <- "weekend"
}
else IWeekday[i] <- "weekday"
}
ImputeActivity <- mutate(ImputeActivity, dayType = IWeekday)
setwd("~/Documents/## Github Repo/Human-Activity-Recognition_Machine-Learning")
url1<-https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv
url1<-https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv
download.file(url1,destfile="./data/training.csv",method="curl")
url1<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
url2<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(url1,destfile="./data/training.csv",method="curl")
if(!dir.exists("data")){create.dir("data")}
if(!file.exists("data")){create.dir("data")}
if(!file.exists("data")){dir.create("data")}
download.file(url1,destfile="./data/training.csv",method="curl")
download.file(url2,destfile="./data/training.csv",method="curl")
download.file(url1,destfile="./data/training.csv",method="curl")
download.file(url2,destfile="./data/testing.csv",method="curl")
training<-read.csv("./data/training.csv")
testing<-read.csv("./data/testing.csv")
View(testing)
library(caret)
names(training)
names(training)
View(testing)
x<-c(1,2,NA)
x
is.na(x)
complete.cases(x)
x<-c(1,2,3)
y<-c(1)
y%in%x
x%in%y
y<-c(1,2)
y%in%x
length(names(training))
sapply(colnames(training),FUN=function(x){class(training[,n])})
sapply(colnames(training),FUN=function(x){class(training[,x])})
apply(training,2,class)
table(apply(training,2,class))
table(sapply(colnames(training),FUN=function(x){class(training[,x])}))
table(apply(training,2,class))
table(sapply(colnames(training),FUN=function(x){class(training[,x])}))
str(training)
class(training[,4])
apply(training,2,class)
table(apply(training,1,class))
table(apply(training,2,class))
table(apply(training,2,class))
# table(apply(training,2,FUN=function(x){class(x)}))
table(apply(training,2,FUN=function(x){class(x)}))
class(training)
table(sapply(colnames(training),FUN=function(x){class(training[,x])}))
colNA<-apply(is.na(training),2,sum)
barplot(colNA)
table(colNA)
colNA<-apply(is.na(training),1,sum)
table(colNA)
colNA
table(colNA)
rowNA<-apply(is.na(training),1,sum)
table(rowNA)
colNA<-apply(is.na(training),1,sum)
table(colNA)
colNA<-apply(is.na(training),2,sum)
table(colNA)
colNA<-apply(complete.cases(training),2,sum)
complete.cases(training)
numColNA<-data.frame(col_name=names(training),NAcount=colSums(is.na(training)))
View(numColNA)
numColNA<-data.frame(col_name=names(training),NAcount=colSums(is.na(training)),row.names=NULL)
View(numColNA)
validColNames<-subset(numColNA,NAcount==0)
View(validColNames)
validColNames<-subset(numColNA,NAcount==0,row.names=NULL)
View(validColNames)
validColNames<-subset(numColNA,NAcount==0,row.names=NULL)$col_name
View(training)
noNA<-training[,-validColNames]
noNA<-training[,!validColNames]
noNA<-training[,names(training)%in%validColNames]
x<-data.frame(col_name=names(noNA),NAcount=colSums(is.na(noNA)))
View(x)
rm("x")
nzv<-nearZerovVariance(noNA)
nzv<-nearZerovVar(noNA)
nzv<-nearZeroVar(noNA)
nzv
noNA_zv<-noNA[,-nzv]
table(sapply(colnames(noNA_zv),FUN=function(x){class(training[,x])}))
View(numColNA)
class(noNA_zv)
class(noNA_zv[,1])
class(noNA_zv[,2])
apply(noNA_zv,2,class)
x<-factor()
for (i in names(noNA_zv)){
x<-class(noNA_zv[,i])
}
x
for (i in names(noNA_zv)){x<-class(noNA_zv[,i])}
x
for (i in names(noNA_zv)){x<-class(noNA_zv[,i])
x<-c(x)}
x
for (i in names(noNA_zv)){x<-class(noNA_zv[,i])
x<-c(x,x)}
x
for (i in names(noNA_zv)){x<-c(x,class(noNA_zv[,i])}
for (i in names(noNA_zv)){x<-c(x,class(noNA_zv[,i]))}
x
colClass<-data.frame(col_names=names(noNA_zv),class=x)
x<-factor()
for (i in names(noNA_zv)){x<-c(x,class(noNA_zv[,i]))}
colClass<-data.frame(col_names=names(noNA_zv),class=x)
View(colClass)
noFactorNames<-subset(colClass,!class=="factor")
View(noFactorNames)
noFactorNames<-subset(colClass,!class=="factor")$col_names
cor_training <- cor(noNA_zv[, nofactorNames])
cor_training <- cor(noNA_zv[, noFactorNames])
noNA_zv[, noFactorNames]
y<-noNA_zv[, noFactorNames]
View(y)
noFactor<-numeric(noNA_zv[, noFactorNames])
noFactor<-noNA_zv[, noFactorNames]
View(noFactor)
noFactor<-noNA_zv[, noFactorNames]
x<-c(1)
class(x)<-character
for (i in 1:dim(noFactor)[2]){
noFactor[,i]<-as.numeric(noFactor[,i])
}
View(noFactor)
cor_training <- cor(noFactor)
corrDescr <- findCorrelation(cor_training, cutoff = 0.75)
noNA_zv_cor<- noNA_zv[, -corrDescr]
View(noNA_zv_cor)
View(testing)
View(noNA_zv)
corrDescr
noNA_zv_cor<- noNA_zv[, -noFactorNames[,corrDescr]]
noFactorNames[,corrDescr]
noFactorNames[corrDescr]
noNA_zv_cor<- noNA_zv[, -noFactorNames[corrDescr]]
-noFactorNames[corrDescr]
-noFactorNames[corrDescr]
noFactorNames[corrDescr]
View(noNA_zv)
noNA_zv_cor<- subset(noNA_zv,!names(noNA_ZV) %in% noFactorNames[corrDescr])
noNA_zv_cor<- subset(noNA_zv,!names(noNA_zv) %in% noFactorNames[corrDescr])
noNA_zv_cor<- noNA_zv[,!names(noNA_zv) %in% noFactorNames[corrDescr]]
View(noNA_zv_cor)
View(colClass)
sum(colClass$class=="factor")
names(noNA_zv_cor)
View(noNA_zv_cor)
View(noNA)
View(noNA_zv)
noFactorNames[corrDescr]
View(noNA_zv_cor)
!names(noNA_zv) %in% noFactorNames[corrDescr]
noNA_zv_cor<- noNA_zv[,names(noNA_zv) %in% noFactorNames[corrDescr]]
View(noNA_zv_cor)
corrDescr <- findCorrelation(cor_training, cutoff = 0.75)
cor_training <- cor(noFactor)
View(cor_training)
View(colClass)
corrDescr
noNA_zv_cor<- noNA_zv[,!names(noNA_zv) %in% noFactorNames[corrDescr]]
View(noNA_zv_cor)
View(noNA_zv_cor)
noNA_zv_cor <- training_no_na_nzv_cor[, !(names(noNA_zv_cor) %in% c('user_name', 'X', 'num_window'))]
noNA_zv_cor <- noNA_zv_cor[, !(names(noNA_zv_cor) %in% c('user_name', 'X', 'num_window'))]
