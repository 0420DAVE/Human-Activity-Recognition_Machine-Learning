ozone0<-ozone[ss,];ozone0<-ozone0[order(ozone0$ozone),]
# fit loess function through data
loess0 <- loess(temperature ~ ozone,data=ozone0,span=0.2)
# prediction from loess curve for the same values each time
ll[i,] <- predict(loess0,newdata=data.frame(ozone=1:155))
}
plot(ozone$ozone,ozone$temperature, pch=19,cex=0.5)
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=2)}
line(1:155,sapply(ll,2,mean),col="red",lwd=2)
line(1:155,apply(ll,2,mean),col="red",lwd=2)
lines(1:155,apply(ll,2,mean),col="red",lwd=2)
points(1:155,apply(ll,2,mean),col="red",lwd=2)
points(1:155,apply(ll,2,mean),col="red",lwd=1)
points(1:155,apply(ll,2,mean),col="red",lwd=1)
plot(ozone$ozone,ozone$temperature, pch=19,cex=0.5)
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=2)}
points(1:155,apply(ll,2,mean),col="red",lwd=1)
lines(1:155,apply(ll,2,mean),col="red",lwd=1)
plot(ozone$ozone,ozone$temperature, pch=19,cex=0.5)
for(i in 1:10){lines(1:155,ll[i,],col="grey",lwd=2)}
lines(1:155,apply(ll,2,mean),col="red",lwd=1)
predictor<-data.frame(ozone=ozone$ozone)
temperature=ozone$temperature
predictor<-data.frame(ozone=ozone$ozone)
temperature=ozone$temperature
treebag<-bag(predictor,temperature,B=10,
bagControl=bagControl(fit=ctreebag$fit,predict=cteeBag$pred,aggregate=ctreebag&aggregate))
predictor<-data.frame(ozone=ozone$ozone)
temperature=ozone$temperature
treebag<-bag(predictor,temperature,B=10,
bagControl=bagControl(fit=ctreeBag$fit,predict=cteeBag$pred,aggregate=ctreeBag&aggregate))
predictor<-data.frame(ozone=ozone$ozone)
temperature=ozone$temperature
treebag<-bag(predictor,temperature,B=10,
bagControl=bagControl(fit=ctreeBag$fit,predict=ctreeBag$pred,aggregate=ctreeBag&aggregate))
library(party); data(ozone,package="ElemStatLearn")
install.packages"party"
install.packages("party")
library(party); data(ozone,package="ElemStatLearn")
# reorder rows based on ozone variable
ozone <- ozone[order(ozone$ozone),]
# extract predictors
predictors <- data.frame(ozone=ozone$ozone)
# extract outcome
temperature <- ozone$temperature
# run bagging algorithm
treebag <- bag(predictors, temperature, B = 10,
# custom bagging function
bagControl = bagControl(fit = ctreeBag$fit,
predict = ctreeBag$pred,
aggregate = ctreeBag$aggregate))
plot(ozone$ozone,temperature,col='lightgrey',pch=19)
# plot the first fit
points(ozone$ozone,predict(treebag$fits[[1]]$fit,predictors),pch=19,col="red")
# plot the aggregated predictions
points(ozone$ozone,predict(treebag,predictors),pch=19,col="blue")
```
colNames(iris)
colnames(iris)
head(ozone)
#reorder based on ozone variable
ozone<-ozone[order(ozone$ozone),]
#create empty matrix
ll<-matrix(NA,nrow=10,ncol=155)
for (i in 1:10){
#create sampel from data with replacement, create index first
ss<-sample(dim(ozone)[1],replace=T)
ozone0<-ozone[ss,];ozone0<-ozone[order(ozone$ozone),];
#fit loess function through data (similar to spline)
loess0<-loess(temperature~ozone,data=ozone0,span=0.2)
#predict from loess curve for the same value each time
ll[i,]<-predict(loess0,newdata=data.frame(ozone=1:155))
}
ll
head(ozone)
#reorder based on ozone variable
ozone<-ozone[order(ozone$ozone),]
#create empty matrix
ll<-data.frame(NA,nrow=10,ncol=155)
for (i in 1:10){
#create sampel from data with replacement, create index first
ss<-sample(dim(ozone)[1],replace=T)
ozone0<-ozone[ss,];ozone0<-ozone[order(ozone$ozone),];
#fit loess function through data (similar to spline)
loess0<-loess(temperature~ozone,data=ozone0,span=0.2)
#predict from loess curve for the same value each time
ll[i,]<-predict(loess0,newdata=data.frame(ozone=1:155))
}
ll
8732
2
3
## Reproducibility
Due to security concerns with the exchange of R code, your code will not be run during the evaluation by your classmates. Please be sure that if they download the repo, they will be able to view the compiled HTML version of your analysis.
```{r global_options, message=FALSE, echo=FALSE}
knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='Figs/', warning=FALSE, message=FALSE)
library(caret)
require("e1071")
library(plyr)
```
## Download Data
```{r}
setwd("~/Documents/## Github Repo/Human-Activity-Recognition_Machine-Learning")
library(caret)
url1<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
url2<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
# Create a folder called data
if(!file.exists("data")){dir.create("data")}
# Download training and testing file to data
#download.file(url1,destfile="./data/training.csv",method="curl")
#download.file(url2,destfile="./data/testing.csv",method="curl")
# Read data into R
training<-read.csv("./data/training.csv")
testing<-read.csv("./data/testing.csv")
set.seed(3456)
inTrain <- createDataPartition(training$classe, p=0.7, list=FALSE)
training <- training[inTrain,]
testing <- training[-inTrain,]
```
## Explore data
```{r explore}
length(names(training))
table(sapply(colnames(training),FUN=function(x){class(training[,x])}))
# table(apply(training,2,class))
```
Missing values
```{r}
# Compute the sum of NA of each column
rowNA<-apply(is.na(training),1,sum)
table(rowNA)
# Therefore, we have 406 out of 19622 observations that is complete in every column
colNA<-apply(is.na(training),2,sum)
table(colNA)
# There are 93 columns that have no NAs
```
## Reduce dataset
Take away the NA columns
```{r}
numColNA<-data.frame(col_name=names(training),NAcount=colSums(is.na(training)),row.names=NULL)
validColNames<-subset(numColNA,NAcount==0,row.names=NULL)$col_name
noNA<-training[,names(training)%in%validColNames]
```
Remove varaibles with near zero variance
```{r}
nzv<-nearZeroVar(noNA)
noNA_zv<-noNA[,-nzv]
```
Deal with variables of high correlations
```{r}
table(sapply(colnames(noNA_zv),FUN=function(x){class(training[,x])}))
# cor() does not work on factors
# get the column names that is not character
x<-factor()
for (i in names(noNA_zv)){x<-c(x,class(noNA_zv[,i]))}
colClass<-data.frame(col_names=names(noNA_zv),class=x)
noFactorNames<-subset(colClass,!class=="factor")$col_names
# convert rest data to interger
noFactor<-noNA_zv[, noFactorNames]
for (i in 1:dim(noFactor)[2]){
noFactor[,i]<-as.numeric(noFactor[,i])
}
cor_training <- cor(noFactor)
# find highly correlated descriptors, return a vector of intergers correspondng to columns to remove to reduce pair-wise correlations
corrDescr <- findCorrelation(cor_training, cutoff = 0.75)
noFactorNames[corrDescr]
noNA_zv_cor<- noNA_zv[,!names(noNA_zv) %in% noFactorNames[corrDescr]]
```
We can see that there are a factor variable called user_name, a variable X which is simply the row number and finally num_window. Letâ€™s remove them since they are irrelevant.
```{r}
noNA_zv_cor <- noNA_zv_cor[, !(names(noNA_zv_cor) %in% c('user_name', 'X', 'num_window'))]
table(sapply(noNA_zv_cor,class))
```
## Training
Because `class` is a factor variable we will need to train a classifier and since it has more than two levels, we cannot use Generalized Linear Models (glm).
Instead we have to use more advanced classifiers. More specifically classification and regression trees (CART), stochastic gradient boosting and random forest. All classifiers will be trained using 5-fold Cross Validation to reduce model overfitting and to estimate the out of sample error during training. We expect this estimate to be close to the final out of sample error that we will calculate later on using the test dataset. Our metric will be accuracy.
```{r}
trControl <- trainControl(method="cv", number=5)
```
### 1. CART (rpart)
```{r}
noNA_zv_cor_rpart <- train(classe ~ ., data = noNA_zv_cor, method='rpart', trControl = trControl)
noNA_zv_cor_rpart$results[1,]
```
#### Result
```{r}
pred_rpart <- predict(noNA_zv_cor_rpart, testing)
cm_rpart <- confusionMatrix(pred_rpart, testing$classe)
cm_rpart
```
Out of sample error measured by accuracy is 0.4233. During training, this was estimated to be 0.5293. This classifier does not perform well.
### 2. Random Forest (parRF)
```{r}
rfParam <- expand.grid(mtry = 2)
noNA_zv_cor_rf <- train(classe ~ ., data = noNA_zv_cor, method='parRF', prox=TRUE, tuneGrid = rfParam, trControl = trControl)
noNA_zv_cor_rf$results
pred_rpart <- predict(noNA_zv_cor_rpart, testing)
cm_rpart <- confusionMatrix(pred_rpart, testing$classe)
cm_rpart
noNA_zv_cor_rf <- randomForest(classe ~ ., data = noNA_zv_cor)
noNA_zv_cor_rf$results
prediction3<-predict(noNA_zv_cor_rf ,testing)
confusionMatrix(prediction3,testing$classe)$overall
noNA_zv_cor_rf
confusionMatrix(prediction3,testing$classe)$overall
confusionMatrix(prediction3,testing$classe)
noNA_zv_cor_rf
prediction3<-predict(noNA_zv_cor_rf ,testing)
confusionMatrix(prediction3,testing$classe)
noNA_zv_cor_rf <- randomForest(classe ~ ., data = noNA_zv_cor)
library(randomForest)
answers = rep("A", 20)
answers = rep("A", 20)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_1_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(answers)
testing1<-read.csv("./data/testing.csv")
prediction3<-predict(noNA_zv_cor_rf ,testing1)
length(names(testing1))
table(sapply(colnames(testing1),FUN=function(x){class(testing1[,x])}))
# table(apply(testing1,2,class))
```
Missing values
```{r}
# Compute the sum of NA of each column
rowNA<-apply(is.na(testing1),1,sum)
table(rowNA)
# Therefore, we have 406 out of 19622 observations that is complete in every column
colNA<-apply(is.na(testing1),2,sum)
table(colNA)
# There are 93 columns that have no NAs
```
## Reduce dataset
Take away the NA columns
```{r}
numColNA<-data.frame(col_name=names(testing1),NAcount=colSums(is.na(testing1)),row.names=NULL)
validColNames<-subset(numColNA,NAcount==0,row.names=NULL)$col_name
noNA<-testing1[,names(testing1)%in%validColNames]
```
Remove varaibles with near zero variance
```{r}
nzv<-nearZeroVar(noNA)
noNA_zv<-noNA[,-nzv]
```
Deal with variables of high correlations
```{r}
table(sapply(colnames(noNA_zv),FUN=function(x){class(testing1[,x])}))
# cor() does not work on factors
# get the column names that is not character
x<-factor()
for (i in names(noNA_zv)){x<-c(x,class(noNA_zv[,i]))}
colClass<-data.frame(col_names=names(noNA_zv),class=x)
noFactorNames<-subset(colClass,!class=="factor")$col_names
# convert rest data to interger
noFactor<-noNA_zv[, noFactorNames]
for (i in 1:dim(noFactor)[2]){
noFactor[,i]<-as.numeric(noFactor[,i])
}
cor_testing1 <- cor(noFactor)
# find highly correlated descriptors, return a vector of intergers correspondng to columns to remove to reduce pair-wise correlations
corrDescr <- findCorrelation(cor_testing1, cutoff = 0.75)
noFactorNames[corrDescr]
noNA_zv_cor<- noNA_zv[,!names(noNA_zv) %in% noFactorNames[corrDescr]]
```
We can see that there are a factor variable called user_name, a variable X which is simply the row number and finally num_window. Letâ€™s remove them since they are irrelevant.
```{r}
noNA_zv_cor <- noNA_zv_cor[, !(names(noNA_zv_cor) %in% c('user_name', 'X', 'num_window'))]
table(sapply(noNA_zv_cor,class))
length(names(testing1))
table(sapply(colnames(testing1),FUN=function(x){class(testing1[,x])}))
# table(apply(testing1,2,class))
```
Missing values
rowNA<-apply(is.na(testing1),1,sum)
table(rowNA)
# Therefore, we have 406 out of 19622 observations that is complete in every column
colNA<-apply(is.na(testing1),2,sum)
table(colNA)
numColNA<-data.frame(col_name=names(testing1),NAcount=colSums(is.na(testing1)),row.names=NULL)
validColNames<-subset(numColNA,NAcount==0,row.names=NULL)$col_name
noNA<-testing1[,names(testing1)%in%validColNames]
```
Remove varaibles with near zero variance
```{r}
nzv<-nearZeroVar(noNA)
noNA_zv<-noNA[,-nzv]
```
Deal with variables of high correlations
```{r}
table(sapply(colnames(noNA_zv),FUN=function(x){class(testing1[,x])}))
# cor() does not work on factors
# get the column names that is not character
x<-factor()
for (i in names(noNA_zv)){x<-c(x,class(noNA_zv[,i]))}
colClass<-data.frame(col_names=names(noNA_zv),class=x)
noFactorNames<-subset(colClass,!class=="factor")$col_names
# convert rest data to interger
noFactor<-noNA_zv[, noFactorNames]
for (i in 1:dim(noFactor)[2]){
noFactor[,i]<-as.numeric(noFactor[,i])
}
cor_testing1 <- cor(noFactor)
# find highly correlated descriptors, return a vector of intergers correspondng to columns to remove to reduce pair-wise correlations
corrDescr <- findCorrelation(cor_testing1, cutoff = 0.75)
noFactorNames[corrDescr]
noNA_zv_cor<- noNA_zv[,!names(noNA_zv) %in% noFactorNames[corrDescr]]
```
We can see that there are a factor variable called user_name, a variable X which is simply the row number and finally num_window. Letâ€™s remove them since they are irrelevant.
```{r}
noNA_zv_cor <- noNA_zv_cor[, !(names(noNA_zv_cor) %in% c('user_name', 'X', 'num_window'))]
table(sapply(noNA_zv_cor,class))
ing devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement â€“ a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, ** but they rarely quantify how well they do it **.
In this project, your goal will be to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways. More information is available from the website here: http://groupware.les.inf.puc-rio.br/har (see the section on the Weight Lifting Exercise Dataset).
## What you should submit
The goal of your project is to predict the manner in which they did the exercise. This is the **classe** variable in the training set. You may use any of the other variables to predict with. You should create a report describing how you built your model, how you used cross validation, what you think the expected out of sample error is, and why you made the choices you did. You will also use your prediction model to predict 20 different test cases.
1. Your submission should consist of a link to a Github repo with your R markdown and compiled HTML file describing your analysis. Please constrain the text of the writeup to < 2000 words and the number of figures to be less than 5. It will make it easier for the graders if you submit a repo with a gh-pages branch so the HTML page can be viewed online (and you always want to make it easy on graders :-).
2. You should also apply your machine learning algorithm to the 20 test cases available in the test data above. Please submit your predictions in appropriate format to the programming assignment for automated grading. See the programming assignment for additional details.
## Reproducibility
Due to security concerns with the exchange of R code, your code will not be run during the evaluation by your classmates. Please be sure that if they download the repo, they will be able to view the compiled HTML version of your analysis.
```{r global_options, message=FALSE, echo=FALSE}
knitr::opts_chunk$set(fig.width=12, fig.height=8, fig.path='Figs/', warning=FALSE, message=FALSE)
library(caret)
require("e1071")
library(plyr)
```
## Download Data
```{r}
setwd("~/Documents/## Github Repo/Human-Activity-Recognition_Machine-Learning")
library(caret)
url1<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
url2<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
# Create a folder called data
if(!file.exists("data")){dir.create("data")}
# Download training and testing file to data
#download.file(url1,destfile="./data/training.csv",method="curl")
#download.file(url2,destfile="./data/testing.csv",method="curl")
# Read data into R
training<-read.csv("./data/training.csv")
testing1<-read.csv("./data/testing.csv")
set.seed(3456)
inTrain <- createDataPartition(training$classe, p=0.7, list=FALSE)
training <- training[inTrain,]
testing <- training[-inTrain,]
```
## Explore data
```{r explore}
length(names(training))
table(sapply(colnames(training),FUN=function(x){class(training[,x])}))
# table(apply(training,2,class))
```
Missing values
```{r}
# Compute the sum of NA of each column
rowNA<-apply(is.na(training),1,sum)
table(rowNA)
# Therefore, we have 406 out of 19622 observations that is complete in every column
colNA<-apply(is.na(training),2,sum)
table(colNA)
# There are 93 columns that have no NAs
```
## Reduce dataset
Take away the NA columns
```{r}
numColNA<-data.frame(col_name=names(training),NAcount=colSums(is.na(training)),row.names=NULL)
validColNames<-subset(numColNA,NAcount==0,row.names=NULL)$col_name
noNA<-training[,names(training)%in%validColNames]
```
Remove varaibles with near zero variance
```{r}
nzv<-nearZeroVar(noNA)
noNA_zv<-noNA[,-nzv]
```
Deal with variables of high correlations
```{r}
table(sapply(colnames(noNA_zv),FUN=function(x){class(training[,x])}))
# cor() does not work on factors
# get the column names that is not character
x<-factor()
for (i in names(noNA_zv)){x<-c(x,class(noNA_zv[,i]))}
colClass<-data.frame(col_names=names(noNA_zv),class=x)
noFactorNames<-subset(colClass,!class=="factor")$col_names
# convert rest data to interger
noFactor<-noNA_zv[, noFactorNames]
for (i in 1:dim(noFactor)[2]){
noFactor[,i]<-as.numeric(noFactor[,i])
}
cor_training <- cor(noFactor)
# find highly correlated descriptors, return a vector of intergers correspondng to columns to remove to reduce pair-wise correlations
corrDescr <- findCorrelation(cor_training, cutoff = 0.75)
noFactorNames[corrDescr]
noNA_zv_cor<- noNA_zv[,!names(noNA_zv) %in% noFactorNames[corrDescr]]
```
We can see that there are a factor variable called user_name, a variable X which is simply the row number and finally num_window. Letâ€™s remove them since they are irrelevant.
```{r}
noNA_zv_cor <- noNA_zv_cor[, !(names(noNA_zv_cor) %in% c('user_name', 'X', 'num_window'))]
table(sapply(noNA_zv_cor,class))
x<-names(noNA_zv_cor)
testing1<-testing1[,x]
x<-names(noNA_zv_cor)
x
testing1<-testing1[,x[,-35]]
x<-x[-35]
x
testing1<-testing1[,x]
prediction3<-predict(noNA_zv_cor_rf ,testing1)
x<-names(noNA_zv_cor)
x
x<-x[-35]
prediction3<-predict(noNA_zv_cor_rf ,testing1)
names(testing1)
prediction3<-predict(noNA_zv_cor_rf ,testing1[-58])
prediction3<-predict(noNA_zv_cor_rf ,testing1[-35])
x<-names(noNA_zv_cor)
x<-x[-35]
names(testing1)
testing1<-testing1[,x]
prediction3<-predict(noNA_zv_cor_rf ,testing1)
answers = prediction2
answers = prediction3
answers
testing_final <- read.csv('pml-testing.csv.gz')
rfParam <- expand.grid(mtry = 2)
m_no_na_nzv_cor_rf <- train(classe ~ ., data = noNA_zv_cor, method='parRF', prox=TRUE, tuneGrid = rfParam, trControl = trControl)
prediction3<-predict(m_no_na_nzv_cor_rf ,testing1)
m_no_na_nzv_cor_rf <- train(classe ~ ., data = noNA_zv_cor, method='parRF', prox=TRUE, tuneGrid = rfParam, trControl = trControl)
Prediction3 <- predict(m_no_na_nzv_cor_rf, testing_final)
prediction3<-predict(m_no_na_nzv_cor_rf ,testing1)
Prediction3 <- predict(m_no_na_nzv_cor_rf, testing_final)
noNA_zv_cor_rf <- randomForest(classe ~ ., data = noNA_zv_cor)
prediction3<-predict(noNA_zv_cor_rf ,testing)
confusionMatrix(prediction3,testing$classe)
prediction3<-predict(noNA_zv_cor_rf ,testing1)
prediction3<-predict(noNA_zv_cor_rpart ,testing)
prediction3<-predict(noNA_zv_cor_rpart ,testing)
prediction3<-predict(noNA_zv_cor_rf ,testing)
confusionMatrix(prediction3,testing$classe)
prediction3<-predict(noNA_zv_cor_rpart ,testing1)
prediction3
testing1$class<-as.character()
testing1$class<-as.character("a",rep=20)
Prediction3 <- predict(noNA_zv_cor_rf, testing_final)
Prediction3 <- predict(noNA_zv_cor_rf, testing1)
x<-names(noNA_zv_cor)
x<-x[-35]
names(testing1)
testing1<-testing1[,x]
match(sapply(testing1,class), sapply(training,class))
Prediction3 <- predict(noNA_zv_cor_rf, testing1)
prediction3<-predict(noNA_zv_cor_rpart ,testing1)
sapply(testing1,class)
table(sapply(testing1,class))
table(sapply(training,class))
table(sapply(noNA_zv_cor,class))
x<-factor()
for (i in names(testing1)){x<-c(x,class(testing1[,i]))}
colClass<-data.frame(col_names=names(testing1),class=x)
noFactorNames<-subset(colClass,!class=="factor")$col_names
# convert rest data to interger
noFactor<-testing1[, noFactorNames]
for (i in 1:dim(noFactor)[2]){
noFactor[,i]<-as.numeric(noFactor[,i])
}
table(sapply(training,class))
table(sapply(testing1,class))
colClass
colClass<-data.frame(colClass)
colClass1<-data.frame(col_names=names(noNA_zv),class=x)
Prediction3 <- predict(noNA_zv_cor_rf, testing1)
testing1<-read.csv("./data/testing.csv")
x<-factor()
for (i in names(testing1)){x<-c(x,class(testing1[,i]))}
colClass<-data.frame(col_names=names(testing1),class=x)
noFactorNames<-subset(colClass,!class=="factor")$col_names
# convert rest data to interger
noFactor<-testing1[, noFactorNames]
for (i in 1:dim(noFactor)[2]){
noFactor[,i]<-as.numeric(noFactor[,i])
}
cor_training <- cor(noFactor)
table(sapply(noNA_zv_cor,class))
table(sapply(testing1,class))
x<-names(noNA_zv_cor)
x<-x[-35]
names(testing1)
testing1<-testing1[,x]
table(sapply(testing1,class))
table(sapply(noNA_zv_cor,class))
class(testing1$classe)
answers = c("B","A","B","A","A","E","D","B","A","A","B","C","B","A","E","E","A","B","B","B")
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_1_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
setwd("~/Documents/## Github Repo/Human-Activity-Recognition_Machine-Learning/TEST SUBMISSION")
class(1$classe)
answers = c("B","A","B","A","A","E","D","B","A","A","B","C","B","A","E","E","A","B","B","B")
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_1_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(answers)
pml_write_files(answers)
